name: Publish Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  # Configuring Project
  AUTOOS_PROJECT_PATH: AutoOS.csproj
  APP_NAME: AutoOS
  APP_VERSION: '1.0.0.18'
  APP_VERSION_SUFFIX: ''
  APP_VERSION_PREFIX: ''

  # Check Tag
  CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG: false

  # Configuring Dotnet Build Commands
  PUBLISH_OUTPUT_FOLDER: Publish
  PUBLISH_SELF_CONTAINED: true
  PUBLISH_SINGLE_FILE: false
  PUBLISH_READY_TO_RUN: true
  PUBLISH_AOT: false
  PUBLISH_TRIMMED: false
  PUBLISH_TRIM_MODE: partial # or full

  # Configuring GitHub Release
  IS_PRE_RELEASE: false
  SKIP_IF_RELEASE_EXIST: true
  MAKE_LATEST: true
  ALLOW_UPDATES: false
  ARTIFACT_ERRORS_FAIL_BUILD: false

jobs:
  build:
    runs-on: windows-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs: # For accessing them from 'release' job
      IS_PRE_RELEASE: ${{ env.IS_PRE_RELEASE }}
      APP_VERSION: ${{ env.APP_VERSION }} 
    strategy:
      matrix:
        platform: [x64] # Change platform if you want to build only a specific platform

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x.x

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        vs-prerelease: true    

    - name: Run MSBuild to Get Version
      id: get-version
      shell: pwsh
      run: |
        # Run MSBuild and capture raw version output
        $output = & msbuild "${{ env.AUTOOS_PROJECT_PATH }}" /t:GetVersion /v:m 2>&1
        Write-Output "MSBuild Output: $output"

        # Extract the version string (assumes the last line contains the version)
        $lines = $output -split "`n"
        $version = $lines[-1].Trim()
        Write-Output "Extracted Version: $version"

        # Parse the version into prefix and suffix
        if ($version -match '^([^-]+)-(.+)$') {
          $prefix = $Matches[1]
          $suffix = $Matches[2]
        } else {
          $prefix = $version
          $suffix = ""
        }

        # Set environment variables
        Write-Output "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Output "APP_VERSION_PREFIX=$prefix" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Output "APP_VERSION_SUFFIX=$suffix" | Out-File -FilePath $env:GITHUB_ENV -Append
    
    - name: Verify Environment Variables
      run: |
        echo "APP_VERSION=${{ env.APP_VERSION }}"
        echo "APP_VERSION_PREFIX=${{ env.APP_VERSION_PREFIX }}"
        echo "APP_VERSION_SUFFIX=${{ env.APP_VERSION_SUFFIX }}"

    - name: Restore the application
      run: msbuild $env:AUTOOS_PROJECT_PATH /t:Restore /p:Configuration=Release
      env:
        Configuration: Release

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        [IO.File]::WriteAllBytes("GitHubActionsWorkflow.pfx", $pfx_cert_byte)
      shell: pwsh

    - name: Create the MSIX package
      run: msbuild $env:AUTOOS_PROJECT_PATH /p:Configuration=Release /p:Platform=${{ matrix.platform }} /p:SelfContained=${{ env.PUBLISH_SELF_CONTAINED }} /p:PublishAot=${{ env.PUBLISH_AOT }} /p:PublishTrimmed=${{ env.PUBLISH_TRIMMED }} /p:TrimmerDefaultAction=${{ env.PUBLISH_TRIM_MODE }} /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundle=Never /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir=Packages\ /p:GenerateAppxPackageOnBuild=true
      env:
        Platform: ${{ matrix.platform }}
    
    - name: Copy appinstaller and unattend to output folder
      run: |
        $dest = "Packages/${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test"
        Copy-Item -Path "${{ env.APP_NAME }}.appinstaller", "unattend.xml" -Destination $dest
      shell: pwsh

    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx
      shell: pwsh

    # Zipping folder and all files
    - uses: vimtor/action-zip@v1.2
      with:
        files: ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}
        recursive: true
        dest: ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ matrix.platform }}.zip

    # Uploading all zip files to access them in the 'release' job
    - uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.platform }}
        path: Packages\

    # Checking version suffix for words like [alpha, beta, preview, and experiment]. Marking the release as a pre-release if any exists.
    - run: |
        # Define the list of strings
        $list = @("beta", "alpha", "preview", "experiment")

        # Define the suffix variable
        $suffix = "${{ env.APP_VERSION_SUFFIX }}"

        foreach ($item in $list) {
          # Convert both strings to lower case for case-insensitive comparison
          if ($suffix.ToLower().StartsWith($item.ToLower())) {
            echo "IS_PRE_RELEASE=true" >> $env:GITHUB_ENV
            break
          }
        }


  release:
    needs: build
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      # Read some variables from the 'build' job
      APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
      IS_PRE_RELEASE: ${{ needs.build.outputs.IS_PRE_RELEASE }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Downloading all zip files into the GitHub root directory (uploaded in 'build' job)
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Configuring git to create a tag
      - run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          TAG_NAME="v${{ env.APP_VERSION }}"
          if [[ "${{ env.CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG }}" == "true" ]]; then
              git fetch --tags
              if [[ $(git tag -l "$TAG_NAME") ]]; then
                  echo "Tag found (already exist). Skipping to the next step"
              else
                  echo "Tag not found, creating new tag"
                  git tag "$TAG_NAME"
                  git push origin "$TAG_NAME"
              fi
          else
              echo "Creating new tag"
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
          fi  
          
      # Installing a package for generating a changelog file
      - run: npm install -g auto-changelog  
      - run: auto-changelog --tag-pattern .+ --commit-limit false --starting-version v${{ env.APP_VERSION }} --ending-version v${{ env.APP_VERSION }} --hide-credit  
      
      - name: Rename output files
        run: |
          folder="${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test"
          mv "$folder"/*.msix "$folder/AutoOS.msix"
          mv "$folder"/*.cer "$folder/AutoOS.cer"

       # Creating a Release in GitHub
      - uses: ncipollo/release-action@v1
        with:
          artifacts: |
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test/unattend.xml
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test/AutoOS.appinstaller
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test/AutoOS.msix
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_x64_Test/AutoOS.cer
          bodyFile: "CHANGELOG.md"
          name: v${{ env.APP_VERSION }}
          tag: v${{ env.APP_VERSION }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
          skipIfReleaseExists: ${{ env.SKIP_IF_RELEASE_EXIST }}
          makeLatest: ${{ env.MAKE_LATEST }}
          allowUpdates: ${{ env.ALLOW_UPDATES }}
          artifactErrorsFailBuild: ${{ env.ARTIFACT_ERRORS_FAIL_BUILD }}
